[
["index.html", "Saemix: Open Source R package for mixed effects modeling Welcome to mixed effects modeling in R", " Saemix: Open Source R package for mixed effects modeling Marc Lavielle, Emmanuelle Comets, Audrey Lavenu and Belhal Karimi 2020-02-05 Welcome to mixed effects modeling in R The saemix project is an R package (Comets, Lavenu, and Lavielle 2017) available in CRAN that implements the Stochastic Approximation of the EM (SAEM) algorithm introduced in (Kuhn and Lavielle 2004). This algorithm is state-of-the-art method for fitting, possibly non linear, models in agronomy, animal breeding or Pharmacokinetics-Pharmacodynamics (PKPD) analysis. Thus far, the main area using the package thus far is Pharmacology, especially to understand how drugs, under development, behave in the body or how the body reacts to a drug during clinical trials but we ought to aim at a more general audience of biostatisticians dealing with nonlinear mixed effects modeling. saemix is licensed under GPL-2 | GPL-3 [expanded from: GPL (&gt;=2)]. References "],
["intro.html", "Chapter 1 Introduction", " Chapter 1 Introduction Longitudinal data arise in many fields, such as agronomy, spatial analysis, imagery, clinical trials, and have been particularly prominent in the field of pharmacokinetics (PK) and pharmacodynamics (PD), where increasingly complex models involving mechanistic and empirical processes have been developed to describe the time course of and responses to drugs. Nonlinear models pose unique challenges in terms of estimation methods, and have driven the research to provide better estimation of parameters as well as the associated uncertainty, diagnostics of model misspecification and more informative designs. The SAEM algorithm, based on two highly cited publications by one of our project members Marc Lavielle, see (Delyon, Lavielle, and Moulines 1999) and (Kuhn and Lavielle 2004), was implemented in R in 2011 in the saemix R package~(Comets, Lavenu, and Lavielle 2017). Several applications of SAEM in agronomy, animal breeding and PKPD analysis have been published using saemix. PK/PD analyses are now a fundamental element of the registration file submitted to health authority for the approval of new drugs, but NLMEM are also increasingly applied to other areas. In clinical trials, they complement the point analyses by offering a unique understanding of the evolution of disease or treatment action. In cohort studies, they allow to model trajectories such as growth or cognitive decline. Joint models are now routinely used to link the evolution of markers with the occurrence of an event. Making use of S4 classes and methods to provide user-friendly interaction, saemix provides a new maximum likelihood estimation tool with a powerful exact algorithm to the R community. References "],
["install.html", "Chapter 2 Installation 2.1 saemix 2.2 shinyMixR: project management tool", " Chapter 2 Installation saemix can be installed and used on several platforms. Installation can range from easy to challenging, depending on the platform. We are in the process of streamlining this process, and any help or suggestions are greatly appreciated! 2.1 saemix Information on how to install ‘saemix’ and its dependencies on different platforms can be found on the saemix pkgdown site. Separate information can be found on RxODE pkgdown site. 2.1.1 Installation via GitHub To Complete 2.2 shinyMixR: project management tool A user-friendly tool was developed for saemix based on Shiny "],
["materials.html", "Chapter 3 Materials 3.1 User’s Guide 3.2 Posters and Presentations", " Chapter 3 Materials 3.1 User’s Guide Saemix User’s Guide: PDF 3.2 Posters and Presentations PAGE 2011, Athens, Greece: PosterPAGE Various other publications can be found here. "],
["casestudies.html", "Chapter 4 Case Studies 4.1 A two-compartment PK model 4.2 A categorical data model with regression variables 4.3 A repeated time-to-event data model", " Chapter 4 Case Studies Some basic Case Studies are demonstrated in this chapter; the vignettes will be discussing the application in more depth. 4.1 A two-compartment PK model library(saemix) ?saemix Read the Data warfa_data &lt;- read.table(&quot;data/warfarin_data.txt&quot;, header=T) saemix.data&lt;-saemixData(name.data=warfa_data,header=TRUE,sep=&quot; &quot;, na=NA, name.group=c(&quot;id&quot;),name.predictors=c(&quot;amount&quot;,&quot;time&quot;), name.response=c(&quot;y1&quot;), name.X=&quot;time&quot;) Create the Model saemix models are contained in a R function with one blocks: model1cpt&lt;-function(psi,id,xidep) { dose&lt;-xidep[,1] tim&lt;-xidep[,2] ka&lt;-psi[id,1] V&lt;-psi[id,2] k&lt;-psi[id,3] CL&lt;-k*V ypred&lt;-dose*ka/(V*(ka-k))*(exp(-k*tim)-exp(-ka*tim)) return(ypred) } saemix.model&lt;-saemixModel(model=model1cpt,description=&quot;warfarin&quot;, type=&quot;structural&quot;,psi0=matrix(c(1,7,1,0,0,0),ncol=3,byrow=TRUE, dimnames=list(NULL, c(&quot;ka&quot;,&quot;V&quot;,&quot;k&quot;))),transform.par=c(1,1,1), omega.init=matrix(c(1,0,0,0,1,0,0,0,1),ncol=3,byrow=TRUE), covariance.model=matrix(c(1,0,0,0,1,0,0,0,1),ncol=3, byrow=TRUE)) Run the SAEM algorithm K1 = 200 K2 = 100 #Run SAEM options&lt;-list(seed=39546,map=F,fim=F,ll.is=F, nbiter.mcmc = c(2,2,2), nbiter.saemix = c(K1,K2),nbiter.sa=0, displayProgress=TRUE,save.graphs=FALSE,nbiter.burn =0) fit&lt;-saemix(saemix.model,saemix.data,options) 4.2 A categorical data model with regression variables 4.2.1 mlxR: simulate synthetic data library(&quot;mlxR&quot;) catModel &lt;- inlineModel( &quot;[LONGITUDINAL] input = {beta0,gamma0,delta0, dose} dose = {use=regressor} EQUATION: lm0 = beta0+gamma0*t + delta0*dose D = exp(lm0)+1 p0 = exp(lm0)/D p1 = 1/D DEFINITION: y = {type=categorical, categories={0, 1}, P(y=0)=p0, P(y=1)=p1} [INDIVIDUAL] input={beta0_pop, o_beta0, gamma0_pop, o_gamma0, delta0_pop, o_delta0} DEFINITION: beta0 ={distribution=normal, prediction=beta0_pop, sd=o_beta0} gamma0 ={distribution=normal, prediction=gamma0_pop, sd=o_gamma0} delta0 ={distribution=normal, prediction=delta0_pop, sd=o_delta0} &quot;) nobs = 15 tobs&lt;- seq(-20, 50, by=nobs) reg1 &lt;- list(name=&#39;dose&#39;, time=tobs, value=10*(tobs&gt;0)) reg2 &lt;- list(name=&#39;dose&#39;, time=tobs, value=20*(tobs&gt;0)) reg3 &lt;- list(name=&#39;dose&#39;, time=tobs, value=30*(tobs&gt;0)) out &lt;- list(name=&#39;y&#39;, time=tobs) N &lt;- 100 p &lt;- c(beta0_pop=-4, o_beta0=0.3, gamma0_pop= -0.5, o_gamma0=0.2, delta0_pop=1, o_delta0=0.2) g1 &lt;- list(size=N,regressor = reg1) g2 &lt;- list(size=N,regressor = reg2) g3 &lt;- list(size=N,regressor = reg3) g &lt;- list(g1,g2,g3) res &lt;- simulx(model=catModel,output=out, group=g,parameter=p) plot1 &lt;- catplotmlx(res$y) 4.2.2 saemix: fit the noncontinuous data model Create the saemix.data object saemix.data&lt;-saemixData(name.data=res,header=TRUE,sep=&quot; &quot;, na=NA, name.group=c(&quot;id&quot;),name.predictors=c(&quot;amount&quot;,&quot;time&quot;), name.response=c(&quot;y1&quot;), name.X=&quot;time&quot;) Create the model saemix models are contained in a R function with one blocks: cat.model&lt;-function(psi,id,xidep) { level&lt;-xidep[,1] dose&lt;-xidep[,2] time&lt;-xidep[,3] th1 &lt;- psi[id,1] th2 &lt;- psi[id,2] delta0 &lt;- psi[id,3] lm0 &lt;- th1+th2*time + delta0*dose D &lt;- exp(lm0)+1 P0 &lt;- exp(lm0)/D P1 &lt;- 1/D P.obs = (level==0)*P0+(level==1)*P1 return(P.obs) } saemix.model&lt;-saemixModel(model=cat.model,description=&quot;cat model&quot;, type=&quot;likelihood&quot;, psi0=matrix(c(2,1,2),ncol=3,byrow=TRUE, dimnames=list(NULL,c(&quot;th1&quot;,&quot;th2&quot;,&quot;th3&quot;))),transform.par=c(0,1,1), covariance.model=matrix(c(1,0,0,0,1,0,0,0,1),ncol=3,byrow=TRUE), omega.init=matrix(c(2,0,0,0,1,0,0,0,1),ncol=3,byrow=TRUE), error.model=&quot;constant&quot;) Run the SAEM algorithm K1 = 500 K2 = 100 options&lt;-list(seed=39546,map=F,fim=F,ll.is=F, nbiter.mcmc = c(2,2,2), nbiter.saemix = c(K1,K2),nbiter.sa=0, displayProgress=TRUE,save.graphs=FALSE,nbiter.burn =0) saemix.fit&lt;-saemix(saemix.model,saemix.data,options) 4.3 A repeated time-to-event data model Read the Data data(tte.saemix) saemix.data&lt;-saemixData(name.data=tte.saemix,header=TRUE, sep=&quot; &quot;,na=NA, name.group=c(&quot;id&quot;), name.response=c(&quot;y&quot;),name.predictors=c(&quot;time&quot;,&quot;y&quot;), name.X=c(&quot;time&quot;)) Create the Model saemix models are contained in a R function with one blocks: timetoevent.model&lt;-function(psi,id,xidep) { T&lt;-xidep[,1] N &lt;- nrow(psi) Nj &lt;- length(T) censoringtime = 20 lambda &lt;- psi[id,1] beta &lt;- psi[id,2] init &lt;- which(T== 0) cens &lt;- which(T== censoringtime) ind &lt;- setdiff(1:Nj, append(init,cens)) hazard &lt;- (beta/lambda)*(T/lambda)^(beta-1) H &lt;- (T/lambda)^beta logpdf &lt;- rep(0,Nj) logpdf[cens] &lt;- -H[cens] + H[cens-1] logpdf[ind] &lt;- -H[ind] + H[ind-1] + log(hazard[ind]) return(logpdf) } saemix.model&lt;-saemixModel(model=timetoevent.model,description=&quot;time model&quot;, type=&quot;likelihood&quot;, psi0=matrix(c(2,1),ncol=2,byrow=TRUE, dimnames=list(NULL, c(&quot;lambda&quot;,&quot;beta&quot;))), transform.par=c(1,1), covariance.model=matrix(c(1,0,0,1),ncol=2, byrow=TRUE)) Run the SAEM algorithm K1 = 200 K2 = 100 saemix.options&lt;-list(map=F,fim=F,ll.is=F, nb.chains = 1, nbiter.saemix = c(K1,K2),displayProgress=TRUE,save.graphs=FALSE) saemix.fit&lt;-saemix(model,saemix.data,saemix.options) "],
["contacts.html", "Contacts", " Contacts saemix is maintained by Emmanuelle Comets (emmanuelle.comets@inserm.fr) Inserm U738, Paris, France and CIC 0203, Rennes, France and Belhal Karimi (belhal.karimi@polytechnique.edu). Please address any questions, bug notice or suggestions. "],
["references.html", "References", " References "]
]
